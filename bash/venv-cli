#!/usr/bin/env bash
#
# venv-cli - python virtual environment manager
#

set -euo pipefail

# constants
VENV_CLI_VERSION="0.3"
DEFAULT_VENV=".venv"

# colors
BLD=$(tput bold)
RST=$(tput sgr0)
RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YLW=$(tput setaf 3)
MGN=$(tput setaf 5)
CYN=$(tput setaf 6)

# usage
usage() {
  cat << HEREDOC
${BLD}usage${RST}: venv <command> [args]

${BLD}commands${RST}:
  ${CYN}help (h)${RST}              shows this help
  ${CYN}version (v)${RST}           shows version
  ${CYN}init (i)${RST} [path]       creates new venv
  ${CYN}activate (a)${RST} [path]   activates venv
  ${CYN}deactivate (d)${RST}        deactivates venv
  ${CYN}remove (rm)${RST} [path]    removes venv (-f to force)
  ${CYN}doctor${RST}                performs health check
  ${CYN}shellenv${RST}              echoes shell setup

${BLD}notes${RST}:
  - default [path] is always '${DEFAULT_VENV}'
HEREDOC

# if we were called directly, show first-time setup
if (( $1 )); then
  cat << HEREDOC

${BLD}${MGN}first-time setup${RST}
  1. make sure this script is on your PATH
  2. add to your shell's rc file: ${BLD}eval \$(venv-cli shellenv)${RST}
  3. restart your shell, then use ${BLD}venv${RST} not ${BLD}venv-cli${RST}
HEREDOC
fi
}

# core actions
venv_init() {
  local target=${1:-.venv}
  if [[ -d $target ]]; then
    echo "${YLW}venv already exists${RST}: '$target'"
  else
    echo "${GRN}creating new venv${RST}: '$target'..."
    python3 -m venv "$target"
  fi
}

venv_remove() {
  local do_remove=0
  local name="$DEFAULT_VENV"
  for arg in "$@"; do
    [[ $arg == -f ]] && do_remove=1 && continue
    [[ $arg =~ ^(rm|remove)$ ]] && continue
    name=$arg
  done
  if [[ ! -d $name ]]; then
    echo "${RED}venv not found${RST}: '${name}'" >&2
    exit 1
  fi
  local answer;
  while (( do_remove == 0 )); do
    printf "%s" "${CYN}>> do you want to remove '${name}'?${RST} (y/N) "
    read -r answer
    if [[ "$answer" =~ ^[yY] ]]; then
      do_remove=1
    elif [[ "$answer" =~ ^[nN] ]]; then
      echo "${RED}okay, aborting now${RST}"
      exit 0
    fi
  done
  if (( do_remove == 1 )); then
    if rm -rf "$name"; then
      echo "${GRN}deleted venv${RST}: '${name}'"
    else
      echo "${RED}failed to delete venv${RST}: '${name}'" >&2
      echo "do you have sufficient permissions?" >&2
      exit 1
    fi
  fi
}

venv_shellenv() {
  cat << HEREDOC
_venv_activate() {
  # shellcheck disable=SC3043
  local target="\${1:-.venv}"
  if [ -f "\$target/bin/activate" ]; then
    # shellcheck disable=SC1091
    . "\$target/bin/activate"
  else
    echo "venv not found: '\$target'"
  fi
}

_venv_deactivate() {
  if command -v deactivate >/dev/null 2>&1; then
    deactivate
  else
    echo "no active venv to deactivate"
  fi
}

venv() {
  case "\$1" in
    a|activate) shift; _venv_activate "\$@" ;;
    d|deactivate) _venv_deactivate ;;
    v|version|-v|--version) echo "\$VENV_CLI_VERSION" ;;
    *) command venv-cli --wrapped "\$@" ;;
  esac
}
HEREDOC
}

rc_file() {
  local shell
  shell=$(basename "$SHELL")
  case "$shell" in
    zsh) echo "$HOME/.zshrc" ;;
    ksh) echo "$HOME/.kshrc" ;;
    sh) echo "$HOME/.profile" ;;
    *) echo "$HOME/.bashrc" ;;
  esac
}

indent() {
  # Split input on newlines and indent each line
  first_line=1
  echo -e "$1" | while IFS= read -r line; do
    if (( first_line )); then
      first_line=0
      printf "‚îî‚îÄ %s\n" "$line"
    else
      printf "   %s\n" "$line"
    fi
  done
}

doctor_fail() {
  printf "\n%s\n" "${RED}health check failed!${RST} üò± ($1/$2)"
  hint="venv may not be installed correctly; please check that:\n"
  hint+=" 1. venv-cli is on your PATH somewhere\n"
  hint+=" 2. your shell's rc file contains: ${BLD}eval \"\$(venv-cli shellenv)\"${RST}"
  indent "$hint"
}

doctor_pass() {
  printf "\n%s\n" "${GRN}health check passed!${RST} üöÄ ($1/$2)"
}

venv_doctor() {
  (
    local passed=0
    local total=0
    local rc_path
    printf "%s\n\n" "checking venv installation... üîç"
    
    # check 1: get rc file path
    rc_path=$(rc_file)
    (( total++ ))
    if [[ -f "$rc_path" ]]; then
      echo "${GRN}${total}. found shell rc file${RST}: $rc_path"
      (( passed++ ))
    else
      echo "${YLW}${total}. shell not supported or missing rc file${RST}: '$rc_path'"
      hint="if your shell ('${SHELL}') is supported, create its rc file with \n"
      hint+="'touch $rc_path'"
      indent "$hint"
    fi
    
    # check 2: rc file contains eval venv-cli shellenv
    (( total++ ))
    local eval_lines=()
    while IFS= read -r line; do
      eval_lines+=("$line")
    done < <(grep -E 'eval\s+"[^"]*venv-cli\s+shellenv[^"]*"' "$rc_path" 2>/dev/null)
    n_eval_lines=${#eval_lines[@]}
    if [[ $n_eval_lines -eq 0 ]]; then
      echo "${YLW}${total}. venv-cli shellenv may not be evaluated${RST}"
      rc_base="${rc_path##*/}"  # basename of rc file
      hint="add this line to your $rc_base: \n"
      hint+="${BLD}eval \"\$(venv-cli shellenv)\"${RST}"
      indent "$hint"
    else
      eval_line="${eval_lines[$n_eval_lines-1]}"
      echo "${GRN}${total}. found eval line${RST}: $eval_line"
      (( passed++ ))
      if [[ $n_eval_lines -gt 1 ]]; then
        indent "${YLW}found $n_eval_lines eval commands, using last${RST}"
      fi
    fi

    # check 3: try to run shellenv command and validate its output
    (( total++ ))
    set +e
    shellenv_stdout=$(venv-cli shellenv 2>/dev/null)
    shellenv_exit=$?
    if [[ $shellenv_exit -eq 0 ]]; then
      (eval "$shellenv_stdout" >/dev/null 2>&1)
      eval_exit=$?
      if [[ $eval_exit -eq 0 ]]; then
        echo "${GRN}${total}. shellenv works and produces valid shell code${RST}"
        (( passed++ ))
      else
        echo "${YLW}${total}. shellenv works but produces invalid shell code${RST}"
        indent "command succeeded but evaluation failed"
      fi
    else
      echo "${RED}${total}. shellenv command failed${RST}"
      indent "check that ${BLD}venv-cli${RST} is on your PATH"
    fi
    set -e
    
    # checks 4-5: functions
    (( total++ ))
    if command -v _venv_activate >/dev/null 2>&1; then
      echo "${GRN}${total}. activate function is defined${RST}"
      (( passed++ ))
    else
      echo "${RED}${total}. activate function is missing${RST}"
    fi
    
    (( total++ ))
    if command -v _venv_deactivate >/dev/null 2>&1; then
      echo "${GRN}${total}. deactivate function is defined${RST}"
      (( passed++ ))
    else
      echo "${RED}${total}. deactivate function is missing${RST}"
    fi
    
    # summary
    if (( passed == total )); then
      doctor_pass $passed $total
    else
      doctor_fail $passed $total
      return 1
    fi
  )
}

# dispatcher
direct_call=1
cmd=${1:-help}; shift || true
if [[ $cmd == "--wrapped" ]]; then
  direct_call=0
  cmd=${1:-help}; shift || true
fi
case $cmd in
  i|init)         venv_init "$@" ;;
  rm|remove)      venv_remove "$@" ;;
  doctor)         venv_doctor ;;
  shellenv)       venv_shellenv ;;
  h|help|-h|--help) usage $direct_call ;;
  *) echo "${RED}unknown command${RST}: $cmd" >&2; usage $direct_call >&2; exit 1 ;;
esac
